import { User } from '../models/user.js';
import { Key } from '../models/key.js';

const userState = {};

export function setupCommandHandlers(bot) {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    userState[chatId] = { step: 'awaiting_key' };

    await bot.sendMessage(
      chatId,
      `ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржПржЯрж┐ ржПржХржЯрж┐ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржнрж┐рждрзНрждрж┐ржХ ржЕржЯрзЛ-ржкрзЛрж╕рзНржЯрж┐ржВ рж╕рзЗржмрж╛ред\n\nЁЯФС ржПржХржЯрж┐ ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзА ржжрж┐ржиред\n\nржХрзА ржирж╛ ржерж╛ржХрж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @YourTelegramID`
    );
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();

    if (!userState[chatId] || msg.text.startsWith('/')) return;

    const step = userState[chatId].step;

    // Step 1: ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзА ржпрж╛ржЪрж╛ржЗ
    if (step === 'awaiting_key') {
      const keyDoc = await Key.findOne({ key: text, used: false });

      if (!keyDoc) {
        return bot.sendMessage(
          chatId,
          `тЭМ ржЕржмрзИржз ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзАред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ @YourTelegramID ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред`
        );
      }

      userState[chatId] = {
        step: 'awaiting_source',
        activation_key: text,
      };

      return bot.sendMessage(chatId, `тЬЕ ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзА ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\nЁЯФЧ ржПржЦржи рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ @username ржжрж┐ржи (ржПржХрж╛ржзрж┐ржХ рж╣рж▓рзЗ ржХржорж╛ ржжрж┐рзЯрзЗ ржжрж┐ржи):`);
    }

    // Step 2: рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржЗржиржкрзБржЯ
    if (step === 'awaiting_source') {
      const rawSources = text
        .split(',')
        .map(s => s.trim())
        .filter(Boolean);

      // Check all sources start with '@'
      const invalidSources = rawSources.filter(s => !s.startsWith('@'));
      if (rawSources.length === 0) {
        return bot.sendMessage(chatId, 'тЪая╕П рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐рждрзЗ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржжрж┐ржи:');
      } else if (invalidSources.length > 0) {
        return bot.sendMessage(chatId, `тЭМ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржЕржмрж╢рзНржпржЗ '@' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред ржнрзБрж▓ ржЖржЫрзЗ: ${invalidSources.join(', ')}`);
      }

      userState[chatId].sources = rawSources;
      userState[chatId].step = 'awaiting_destination';

      return bot.sendMessage(chatId, `ЁЯУд ржПржЦржи ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ @username ржжрж┐ржи (ржпрзЗржЦрж╛ржирзЗ ржкрзЛрж╕рзНржЯ ржпрж╛ржмрзЗ):`);
    }

    // Step 3: ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓ ржЗржиржкрзБржЯ ржУ рж╕рзЗржн
    if (step === 'awaiting_destination') {
      const activation_key = userState[chatId].activation_key;
      const sources = userState[chatId].sources;
      const destination = text.trim();

      // Destination ржЕржмрж╢рзНржпржЗ '@' ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗ
      if (!destination.startsWith('@')) {
        return bot.sendMessage(chatId, 'тЭМ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржЕржмрж╢рзНржпржЗ @ ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред ржЖржмрж╛рж░ ржжрж┐ржи:');
      }

      const keyDoc = await Key.findOneAndUpdate({ key: activation_key }, { used: true });
      const expires = keyDoc.expires_at;

      await User.create({
        telegram_id: chatId,
        activation_key,
        source_channels: sources,
        destination_channel: destination,
        expires_at: expires,
        status: 'active',
      });

      userState[chatId] = null;

      return bot.sendMessage(
        chatId,
        `ЁЯОЙ рж╕рзЗржЯржЖржк рж╕ржорзНржкржирзНржи!\n\nЁЯУе Sources: ${sources.join(', ')}\nЁЯУд Destination: ${destination}\n\nЁЯХТ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ рж╣ржмрзЗ: ${expires.toDateString()}\n\nтЬЕ ржПржЦржи ржЖржорж╛ржХрзЗ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзБржиред`
      );
    }

  });
}

export async function handleCommand(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  if (text === '/status') {
    const users = await User.find({ telegram_id: chatId });

    if (!users || users.length === 0) {
      return bot.sendMessage(chatId, 'тЪая╕П ржХрзЛржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред');
    }

    let reply = 'ЁЯУД ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирж╕ржорзВрж╣:\n\n';

    for (const user of users) {
      const key = await Key.findOne({ key: user.activation_key }); // <-- key ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ activation_key

      reply += `ЁЯФ╣ Sources: ${user.source_channels?.join(', ') || 'N/A'}\n`;
      reply += `ЁЯФ╕ Destination: ${user.destination_channel || 'N/A'}\n`;
      reply += `ЁЯУж Status: ${user.status === 'active' ? 'тЬЕ Active' : 'тЭМ Inactive'}\n`;
      reply += `ЁЯЧУя╕П Expiry: ${key?.expires_at ? new Date(key.expires_at).toLocaleDateString() : 'Unknown'}\n`;
      reply += `ЁЯЖФ Key: ${user.activation_key}\n`;
      reply += '----------------------\n';
    }

    await bot.sendMessage(chatId, reply);
  }
}
