import { User } from '../models/user.js';
import { Key } from '../models/key.js';

const userState = {};

export function setupCommandHandlers(bot) {
  bot.onText(/\/start|\/new/, async (msg) => {
    const chatId = msg.chat.id;
    userState[chatId] = { step: 'awaiting_key' };

    await bot.sendMessage(
      chatId,
      `ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржПржЯрж┐ ржПржХржЯрж┐ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржнрж┐рждрзНрждрж┐ржХ ржЕржЯрзЛ-ржкрзЛрж╕рзНржЯрж┐ржВ рж╕рзЗржмрж╛ред\n\nЁЯФС ржПржХржЯрж┐ ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзА ржжрж┐ржиред\n\nржХрзА ржирж╛ ржерж╛ржХрж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @Asif_Mahadi0`
    );
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();

    if (!userState[chatId] || text.startsWith('/')) return;

    const step = userState[chatId].step;

    // Step 1: ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзА ржпрж╛ржЪрж╛ржЗ
    if (step === 'awaiting_key') {
      const keyDoc = await Key.findOne({ key: text, used: false });

      if (!keyDoc) {
        return bot.sendMessage(chatId, `тЭМ ржЕржмрзИржз ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзАред ржЖржмрж╛рж░ ржжрж┐ржи ржмрж╛ @Asif_Mahadi0 ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред`);
      }

      userState[chatId] = {
        step: 'awaiting_source',
        activation_key: text,
      };

      return bot.sendMessage(chatId, `тЬЕ ржХрзА ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\nЁЯУе рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ @username ржжрж┐ржи (ржХржорж╛ ржжрж┐рзЯрзЗ):`);
    }

    // Step 2: рж╕рзЛрж░рзНрж╕ ржЗржиржкрзБржЯ
    if (step === 'awaiting_source') {
      const sources = text.split(',').map(s => s.trim()).filter(Boolean);
      const invalid = sources.filter(s => !s.startsWith('@'));

      if (sources.length === 0) {
        return bot.sendMessage(chatId, 'тЪая╕П рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐рждрзЗ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржжрж┐ржи:');
      } else if (invalid.length > 0) {
        return bot.sendMessage(chatId, `тЭМ рж╕рзЛрж░рзНрж╕ ржЗржЙржЬрж╛рж░ржирзЗржо ржЕржмрж╢рзНржпржЗ '@' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред ржнрзБрж▓: ${invalid.join(', ')}`);
      }

      userState[chatId].sources = sources;
      userState[chatId].step = 'awaiting_destination';

      return bot.sendMessage(chatId, `ЁЯУд ржПржЦржи ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ @username ржжрж┐ржи:`);
    }

    // Step 3: ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЗржиржкрзБржЯ ржУ рж╕рзЗржн
    if (step === 'awaiting_destination') {
      const destination = text.trim();
      if (!destination.startsWith('@')) {
        return bot.sendMessage(chatId, 'тЭМ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЕржмрж╢рзНржпржЗ @ ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред ржЖржмрж╛рж░ ржжрж┐ржи:');
      }

      const { activation_key, sources } = userState[chatId];
      const keyDoc = await Key.findOneAndUpdate({ key: activation_key }, { used: true });

      if (!keyDoc) {
        return bot.sendMessage(chatId, 'тЭМ рж╕ржорж╕рзНржпрж╛ржГ ржХрзА ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржмрж╛ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝рзЗржЫрзЗред');
      }

      const newSub = {
        activation_key,
        sources,
        destination,
        expires_at: keyDoc.expires_at,
        status: 'active'
      };

      let user = await User.findOne({ telegram_id: chatId });

      if (user) {
        user.subscription.push(newSub);
        await user.save();
      } else {
        await User.create({
          telegram_id: chatId,
          subscription: [newSub]
        });
      }

      userState[chatId] = null;

      return bot.sendMessage(
        chatId,
        `ЁЯОЙ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ!\n\nЁЯУе Sources: ${sources.join(', ')}\nЁЯУд Destination: ${destination}\nЁЯХТ ржорзЗрзЯрж╛ржж: ${new Date(keyDoc.expires_at).toDateString()}\n\nтЬЕ ржПржЦржи ржЖржорж╛ржХрзЗ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзБржиред`
      );
    }
  });
  bot.onText(/\/cancel/, async (msg) => {
    const chatId = msg.chat.id;

    if (userState[chatId]) {
      userState[chatId] = null;
      return bot.sendMessage(chatId, 'тЭМ ржЪрж▓ржорж╛ржи ржЕржкрж╛рж░рзЗрж╢ржи ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржПржЦржи ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред');
    } else {
      return bot.sendMessage(chatId, 'тД╣я╕П ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ ржЕржкрж╛рж░рзЗрж╢ржи ржЪрж▓ржЫрзЗ ржирж╛ред');
    }
  });

}

export async function handleCommand(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  if (text === '/status') {
    const user = await User.findOne({ telegram_id: chatId });

    if (!user || !user.subscription.length) {
      return bot.sendMessage(chatId, 'тЪая╕П ржХрзЛржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред');
    }

    let reply = 'ЁЯУД ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирж╕ржорзВрж╣:\n\n';

    for (const sub of user.subscription) {
      reply += `ЁЯФ╣ Sources: ${sub.sources?.join(', ') || 'N/A'}\n`;
      reply += `ЁЯФ╕ Destination: ${sub.destination || 'N/A'}\n`;
      reply += `ЁЯУж Status: ${sub.status === 'active' ? 'тЬЕ Active' : 'тЭМ Inactive'}\n`;
      reply += `ЁЯЧУя╕П Expiry: ${sub.expires_at ? new Date(sub.expires_at).toLocaleDateString() : 'Unknown'}\n`;
      reply += `ЁЯЖФ Key: ${sub.activation_key}\n`;
      reply += '----------------------\n';
    }

    await bot.sendMessage(chatId, reply);
  }
}
