import { User } from '../models/user.js';

function escapeHTML(str = '') {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

export function setupSubscriptionCommands(bot) {
  // ====== /setsource ======
  bot.onText(/\/setsource$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ржУ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐ржиред\n\nржЙржжрж╛рж╣рж░ржг: /setsource 1 @channel1,@channel2',
      { parse_mode: 'Markdown' }
    );
  });

  bot.onText(/\/setsource (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const subIndex = parseInt(match[1], 10) - 1; // 1-based to 0-based index
    const channels = match[2].split(',').map(ch => ch.trim()).filter(Boolean);

    if (channels.length === 0) {
      return bot.sendMessage(
        chatId,
        'тЭМ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐ржиред ржЙржжрж╛рж╣рж░ржг: /setsource 1 @channel1,@channel2',
        { parse_mode: 'Markdown' }
      );
    }

    const invalidChannels = channels.filter(ch => !ch.startsWith('@'));
    if (invalidChannels.length > 0) {
      return bot.sendMessage(
        chatId,
        `тЭМ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛ рж╕ржарж┐ржХ ржиржпрж╝, рж╕ржмржЧрзБрж▓рзЛ @ ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗ:\n${invalidChannels.join('\n')}`,
        { parse_mode: 'Markdown' }
      );
    }

    const user = await User.findOne({ telegram_id: chatId });
    if (!user) return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');

    if (!user.subscription || !user.subscription[subIndex]) {
      return bot.sendMessage(chatId, `тЭМ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ${subIndex + 1} ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред`, { parse_mode: 'Markdown' });
    }

    user.subscription[subIndex].sources = channels;
    await user.save();

    bot.sendMessage(chatId, `тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${subIndex + 1} ржПрж░ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ:\n${channels.join('\n')}`);
  });


  // ====== /addsource ======
  bot.onText(/\/addsource$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ржУ ржирждрзБржи рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржирж╛ржо ржжрж┐ржиред\n\nржЙржжрж╛рж╣рж░ржг: /addsource 1 @channel1',
      { parse_mode: 'Markdown' }
    );
  });

  bot.onText(/\/addsource (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const subIndex = parseInt(match[1], 10) - 1;
    const newSource = match[2].trim();

    if (!newSource.startsWith('@')) {
      return bot.sendMessage(chatId, 'тЭМ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржЕржмрж╢рзНржпржЗ @ ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред', { parse_mode: 'Markdown' });
    }

    const user = await User.findOne({ telegram_id: chatId });
    if (!user) return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');

    if (!user.subscription || !user.subscription[subIndex]) {
      return bot.sendMessage(chatId, `тЭМ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ${subIndex + 1} ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред`, { parse_mode: 'Markdown' });
    }

    const currentSources = user.subscription[subIndex].sources || [];

    if (currentSources.includes(newSource)) {
      return bot.sendMessage(chatId, `тЪая╕П ${newSource} ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${subIndex + 1} ржПрж░ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ рждрж╛рж▓рж┐ржХрж╛рзЯ ржЖржЫрзЗред`);
    }

    currentSources.push(newSource);
    user.subscription[subIndex].sources = currentSources;
    await user.save();

    bot.sendMessage(chatId, `тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${subIndex + 1} ржПрж░ ржЬржирзНржп ржирждрзБржи рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ: <pre>${escapeHTML(newSource)}</pre>`, { parse_mode: 'HTML' });
  });


  // ====== /removesource ======
  bot.onText(/\/removesource$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ржУ рж░рж┐ржорзБржн ржХрж░рж╛рж░ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржирж╛ржо(ржЧрзБрж▓рзЛ) ржжрж┐ржиред\n\nржЙржжрж╛рж╣рж░ржг: /removesource 1 @channel1,@channel2',
      { parse_mode: 'Markdown' }
    );
  });

  bot.onText(/\/removesource (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const subIndex = parseInt(match[1], 10) - 1;
    const toRemove = match[2].split(',').map(ch => ch.trim()).filter(Boolean);

    if (toRemove.length === 0) {
      return bot.sendMessage(chatId, 'тЭМ рж░рж┐ржорзБржн ржХрж░рж╛рж░ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐ржиред ржЙржжрж╛рж╣рж░ржг: /removesource 1 @channel1,@channel2', { parse_mode: 'Markdown' });
    }

    const invalidChannels = toRemove.filter(ch => !ch.startsWith('@'));
    if (invalidChannels.length > 0) {
      return bot.sendMessage(
        chatId,
        `тЭМ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛ рж╕ржарж┐ржХ ржиржпрж╝, рж╕ржмржЧрзБрж▓рзЛ @ ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗ:\n${invalidChannels.join('\n')}`,
        { parse_mode: 'Markdown' }
      );
    }

    const user = await User.findOne({ telegram_id: chatId });
    if (!user) return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');

    if (!user.subscription || !user.subscription[subIndex]) {
      return bot.sendMessage(chatId, `тЭМ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ${subIndex + 1} ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред`, { parse_mode: 'Markdown' });
    }

    const currentSources = user.subscription[subIndex].sources || [];
    const updatedSources = currentSources.filter(ch => !toRemove.includes(ch));

    if (updatedSources.length === 0) {
      return bot.sendMessage(chatId, 'тЪая╕П ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗред');
    }

    user.subscription[subIndex].sources = updatedSources;
    await user.save();

    bot.sendMessage(chatId, `тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${subIndex + 1} ржерзЗржХрзЗ рж░рж┐ржорзБржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ:\n${toRemove.join('\n')}`);
  });


  // ====== /setdestination ======
  bot.onText(/\/setdestination$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ржУ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ @username ржжрж┐ржиред\n\nржЙржжрж╛рж╣рж░ржг: /setdestination 1 @yourchannel',
      { parse_mode: 'Markdown' }
    );
  });

  bot.onText(/\/setdestination (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const subIndex = parseInt(match[1], 10) - 1;
    const destination = match[2].trim();

    if (!destination.startsWith('@')) {
      return bot.sendMessage(chatId, 'тЭМ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржирж╛ржо ржЕржмрж╢рзНржпржЗ @ ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред', { parse_mode: 'Markdown' });
    }

    const user = await User.findOne({ telegram_id: chatId });
    if (!user) return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');

    if (!user.subscription || !user.subscription[subIndex]) {
      return bot.sendMessage(chatId, `тЭМ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржиржорзНржмрж░ ${subIndex + 1} ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред`, { parse_mode: 'Markdown' });
    }

    user.subscription[subIndex].destination = destination;
    await user.save();

    bot.sendMessage(chatId, `тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${subIndex + 1} ржПрж░ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ: ${destination}`);
  });


  // ====== /reset ======
  // ржЗржЙржЬрж╛рж░рзЗрж░ ржЬржирзНржп рж░рж┐рж╕рзЗржЯ ржорзЛржб ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржорзНржпрж╛ржк
  const userResetState = new Map();

  bot.onText(/\/reset/, async (msg) => {
    const chatId = msg.chat.id;

    const user = await User.findOne({ telegram_id: chatId });
    if (!user) {
      return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');
    }

    userResetState.set(chatId, true);

    bot.sendMessage(
      chatId,
      'ЁЯФД ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж░рж┐рж╕рзЗржЯ ржорзЛржбрзЗ ржЖржЫрзЗред ржПржЦржи ржирждрзБржи рж╕рзЛрж░рзНрж╕ ржПржмржВ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓ ржжрж┐ржи:\n\n/setsource <ржиржорзНржмрж░> @source1,@source2\n/setdestination <ржиржорзНржмрж░> @destination'
    );
  });


  // ====== /help ======
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpText = `
ЁЯСЛ рж╕рж╣рж╛рзЯрж┐ржХрж╛:

/myinfo - ржЖржкржирж╛рж░ рж╕ржм рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржжрзЗржЦрзБржи
/setsource <ржиржорзНржмрж░> @ch1,@ch2 - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирзЗрж░ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи
/addsource <ржиржорзНржмрж░> @ch3 - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирзЗ ржирждрзБржи рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ ржпрзБржХрзНржд ржХрж░рзБржи
/removesource <ржиржорзНржмрж░> @ch1,@ch2 - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкржи ржерзЗржХрзЗ рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рж░рж╛ржи
/setdestination <ржиржорзНржмрж░> @channel - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирзЗрж░ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи
/reset - рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж░рж┐рж╕рзЗржЯ ржорзЛржб ржЪрж╛рж▓рзБ ржХрж░рзБржи
/start - ржирждрзБржи рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╢рзБрж░рзБ ржХрж░рзБржи
/status - ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирзЗрж░ ржЕржмрж╕рзНржерж╛ ржжрзЗржЦрзБржи
/help - ржПржЗ рж╕рж╣рж╛рзЯрж┐ржХрж╛ ржжрзЗржЦрзБржи
    `;
    bot.sendMessage(chatId, helpText);
  });


  // ====== /myinfo ======
  bot.onText(/\/myinfo/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await User.findOne({ telegram_id: chatId });

    if (!user) {
      return bot.sendMessage(chatId, 'тЭМ ржЖржкржирж┐ ржПржЦржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржиржирж┐ред /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред');
    }

    if (!user.subscription || user.subscription.length === 0) {
      return bot.sendMessage(chatId, 'тЪая╕П ржЖржкржирж╛рж░ ржХрзЛржирзЛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржирзЗржЗред');
    }

    let infoText = `ЁЯЖФ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржЗржбрж┐: ${user.telegram_id}\n\n`;

    user.subscription.forEach((sub, i) => {
      infoText += `ЁЯФ╕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи #${i + 1}\n`;
      infoText += `  ЁЯФС ржХрзА: ${sub.activation_key}\n`;
      infoText += `  ЁЯУе рж╕рзЛрж░рзНрж╕ ржЪрзНржпрж╛ржирзЗрж▓: ${sub.sources.length > 0 ? sub.sources.join(', ') : 'N/A'}\n`;
      infoText += `  ЁЯУд ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи ржЪрзНржпрж╛ржирзЗрж▓: ${sub.destination || 'N/A'}\n`;
      infoText += `  ЁЯХТ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖: ${sub.expires_at ? new Date(sub.expires_at).toLocaleDateString() : 'ржЕржЬрж╛ржирж╛'}\n`;
      infoText += `  ЁЯУж рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${sub.status === 'active' ? 'тЬЕ Active' : 'тЭМ Inactive'}\n`;
      infoText += `-------------------------\n`;
    });

    bot.sendMessage(chatId, infoText);
  });
}
