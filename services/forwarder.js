import fs from 'fs';
import { downloadMedia, cleanupMedia } from './downloader.js';
import { formatMessage } from './formatter.js';
import { User } from '../models/user.js';

// ‡¶è‡¶ï‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°
export async function forwardSingleMessage(bot, message, destination) {
  // destination ‡¶π‡¶ö‡ßç‡¶õ‡ßá string, ‡¶Ø‡ßá‡¶Æ‡¶® '@channelusername'
  const isAdmin = await isBotAdmin(bot, destination);
  if (!isAdmin) {
    console.warn(`‚ùå ‡¶¨‡¶ü @${destination} ‡¶è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ`);
    try {
      // ‡¶è‡¶ñ‡¶® User.findOne ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡¶ü‡¶ø destination ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü
      const user = await User.findOne({ 'subscription.destination': destination });
      if (user) {
        await bot.sendMessage(
          user.telegram_id,
          `‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ü‡¶ï‡ßá ${destination} ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã ‡¶®‡¶æ‡•§`
        );
      }
    } catch (err) {
      console.error('‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', err.message);
    }
    return;
  }

  let file = null;
  try {
    if (message.media) {
      file = await downloadMedia(message);
      if (!file) return;

      const stats = fs.statSync(file.path);
      const sizeMB = stats.size / (1024 * 1024);
      const options = { caption: file.caption, parse_mode: 'HTML' };

      if (sizeMB > 50) {
        console.log(`‚ö†Ô∏è ‡¶¨‡ßú ‡¶´‡¶æ‡¶á‡¶≤ (${sizeMB.toFixed(2)}MB), userbot ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶â‡¶ö‡¶ø‡¶§`);
        return;
      }

      const stream = fs.createReadStream(file.path);
      const isVideo = file.mime.startsWith('video');
      if (isVideo) options.supports_streaming = true;

      await (isVideo
        ? bot.sendVideo(destination, stream, options)
        : bot.sendPhoto(destination, stream, options));
    } else if (message.message) {
      const text = formatMessage(message.message, message.entities || []);
      await bot.sendMessage(destination, text, { parse_mode: 'HTML' });
    }
  } catch (err) {
    console.error('‚ùå ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', err.message);
  } finally {
    if (file) cleanupMedia(file.path);
  }
}

// ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°
export async function forwardMediaGroup(bot, messages, destination) {
  const isAdmin = await isBotAdmin(bot, destination);
  if (!isAdmin) {
    console.warn(`‚ùå ‡¶¨‡¶ü @${destination} ‡¶è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ`);
    try {
      const user = await User.findOne({ 'subscription.destination': destination });
      if (user) {
        await bot.sendMessage(
          user.telegram_id,
          `‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ü‡¶ï‡ßá ${destination} ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã ‡¶®‡¶æ‡•§`
        );
      }
    } catch (err) {
      console.error('‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', err.message);
    }
    return;
  }

  try {
    // üîç ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶ø
    const captionMessage = messages.find(m => m.message?.length > 0);
    const caption = captionMessage
      ? formatMessage(captionMessage.message, captionMessage.entities || [])
      : '';

    const mediaItems = [];
    const addedMsgIds = new Set();

    for (const msg of messages) {
      if (addedMsgIds.has(msg.id)) continue; // ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶è‡¶°‡¶º‡¶æ‡¶§‡ßá
      addedMsgIds.add(msg.id);

      const file = await downloadMedia(msg);
      if (file) {
        const isVideo = file.mime.startsWith('video');
        mediaItems.push({
          type: isVideo ? 'video' : 'photo',
          media: fs.createReadStream(file.path),
          caption: undefined,
          parse_mode: 'HTML',
          ...(isVideo ? { supports_streaming: true } : {}),
          __path: file.path,
        });
      }
    }

    if (mediaItems.length === 0) return;

    if (caption) mediaItems[0].caption = caption;

    await bot.sendMediaGroup(destination, mediaItems);

    for (const item of mediaItems) {
      if (item.__path && fs.existsSync(item.__path)) {
        fs.unlinkSync(item.__path);
        console.log(`üßπ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü: ${item.__path}`);
      }
    }
  } catch (err) {
    console.error('‚ùå ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', err.message);
  }
}

// ‡¶¨‡¶ü ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
async function isBotAdmin(bot, channelUsername) {
  try {
    const me = await bot.getMe();
    const admins = await bot.getChatAdministrators(channelUsername);
    return admins.some(admin => admin.user.id === me.id);
  } catch (err) {
    console.warn(`‚ö†Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø (${channelUsername}):`, err.message);
    return false;
  }
}
